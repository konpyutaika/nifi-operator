## Default values for Traefik
#image: ext-dockerio.artifactory.packages.install-os.multis.p.fti.net/library/traefik
#imageTag: 1.7.14
image: registry.gitlab.si.francetelecom.fr/dfyarchicloud/dfyarchicloud-registry/traefik/traefik-non-root
imageTag: v1.7-alpine
## Optionally specify an array of imagePullSecrets.
## Secrets must be manually created in the namespace.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# imagePullSecrets:
# - "regsecret"


testFramework:
  image: "registry.gitlab.si.francetelecom.fr/dfyarchicloud/dfyarchicloud-registry/dduportal/bats"
  tag: "0.4.0"

## can switch the service type to NodePort if required
serviceType: LoadBalancer
## Set your LB IP
loadBalancerIP: "10.218.153.2"
# loadBalancerSourceRanges: []
whiteListSourceRange: []
externalTrafficPolicy: ""
#externalTrafficPolicy: Cluster
#externalTrafficPolicy: Local
#externalTrafficPolicy: NodePort
clusterIP: ""


replicas: 1
# startupArguments:
#   - "--ping"
#   - "--ping.entrypoint=http"

# /ping health-check entry point.
# pingEntryPoint: http

podDisruptionBudget: {}
  # maxUnavailable: 1
# minAvailable: 2

# priorityClassName: ""

# rootCAs: []

cpuRequest: 1000m
memoryRequest: 40Mi
cpuLimit: 1000m
memoryLimit: 50Mi

ressouces:
  requests:
    memory: "40Mi"
    cpu: "1000m"
  limits:
    memory: "50Mi"
    cpu: "1000m"

#resources:
#  cpuRequest: 1000m
#  memoryRequest: 40Mi
#  cpuLimit: 1000m
#  memoryLimit: 50Mi

debug:
  enabled: true

# logLevel: error

# maxIdleConnsPerHost: 200

deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0
# type: RollingUpdate

podSecurityContext:
  runAsUser: 100

useNonPriviledgedPorts: true
env: {}

#nodeSelector:
#  role: ingress
affinity: {}
# key: value
tolerations: []
# - key: "key"
#   operator: "Equal|Exists"
#   value: "value"
#   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
## Kubernetes ingress filters
kubernetes:
  # endpoint:
  namespaces:
    - proxydata-proxydata
  # labelSelector:
  # ingressClass:
  # ingressEndpoint:
  #   hostname: "localhost"
  #   ip: "127.0.0.1"
  #   publishedService: "namespace/servicename"
  #   useDefaultPublishedService: false

fileBackend: ""
  # as in same traefik.toml
  #
  # [backends]
  #   [backends.backend1]
  #     # ...
  #   [backends.backend2]
  #     # ...
  # [frontends]
  #   [frontends.frontend1]
  #   # ...
  #   [frontends.frontend2]
  #
  # or separated file from configFiles
# filename = "/configs/rules.toml"

proxyProtocol:
  enabled: true
  # trustedIPs is required when enabled
  trustedIPs:
    - 172.24.6.0/23
  # - 10.0.0.0/8
forwardedHeaders:
  enabled: true
  # trustedIPs is required when enabled
  trustedIPs:
    - 172.24.6.0/23
  # - 10.0.0.0/8

## Add arbitrary ConfigMaps to deployment
## Will be mounted to /configs/, i.e. myconfig.json would
## be mounted to /configs/myconfig.json.
configFiles: {}
  # myconfig.json: |
#   filecontents...

## Add arbitrary Secrets to deployment
## Will be mounted to /secrets/, i.e. file.name would
## be mounted to /secrets/mysecret.txt.
## The contents will be base64 encoded when added
secretFiles: {}
  # mysecret.txt: |
#   filecontents...

ssl:
  enabled: true
  enforced: false
  permanentRedirect: false
  upstream: false
  insecureSkipVerify: true
  generateTLS: true
  defaultCN: "*.nifi.pns.svc.rickaastley.p.fti.net"
  # or *.example.com
  defaultSANList: []
    # - example.com
  # - test1.example.com
  defaultIPList: []
  # - 1.2.3.4
  # cipherSuites: []
  # https://docs.traefik.io/configuration/entrypoints/#specify-minimum-tls-version
  # tlsMinVersion: VersionTLS12
  # https://docs.traefik.io/configuration/entrypoints/#strict-sni-checking
  # sniStrict: false
  #defaultCert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUh6VENDQmJXZ0F3SUxxxx
  #defaultKey: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foaxxxx

  # Basic auth to protect all the routes. Can use htpasswd to generate passwords
  # > htpasswd -n -b testuser testpass
  # > testuser:$apr1$JXRA7j2s$LpVns9vsme8FHN0r.aSt11
  auth: {}
    # basic:
  #   testuser: $apr1$JXRA7j2s$LpVns9vsme8FHN0r.aSt11

  # mtls:
  #   enabled: true
  #   optional: false
  #   clientCaCerts: []
  #   # When mTLS is enabled, the set of CA certificates used to validate client TLS certificates.
  #   # https://docs.traefik.io/configuration/entrypoints/#tls-mutual-authentication
  #   # CA certificates should be in PEM format.

kvprovider:
  ## If you want to run Traefik in HA mode, you will need to setup a KV Provider. Therefore you can choose one of
  ## * etcd
  ## * consul
  ## * boltdb
  ## * zookeeper
  ##
  ## ref: https://docs.traefik.io/user-guide/cluster/

  ## storeAcme has to be enabled to support HA Support using acme, but at least one kvprovider is needed
  storeAcme: false
  acmeStorageLocation: traefik/acme/account
  importAcme: false

    # etcd:
    # endpoint: etcd-service:2379
    # useAPIV3: false
    # watch: true
    # prefix: traefik

    ## Override default configuration template.
    ## For advanced users :)
    ##
    ## Optional
    # filename: consul.tmpl
    # username: foo
    # password: bar
    # tls:
    #   ca: "/etc/ssl/ca.crt"
    #   cert: "/etc/ssl/consul.crt"
    #   key: "/etc/ssl/consul.key"
    #   insecureSkipVerify: true
    #
    # consul:
    # endpoint: consul-service:8500
    # watch: true
    # prefix: traefik

    ## Override default configuration template.
    ## For advanced users :)
    ##
    ## Optional
    # filename: consul.tmpl
    # username: foo
    # password: bar
    # tls:
    #   ca: "/etc/ssl/ca.crt"
    #   cert: "/etc/ssl/consul.crt"
    #   key: "/etc/ssl/consul.key"
    #   insecureSkipVerify: true

  ## only relevant for etcd


acme:
  keyType: RSA4096
  enabled: false
  email: admin@example.com
  onHostRule: true
  staging: true
  logging: false
  # Configure a Let's Encrypt certificate to be managed by default.
  # This is the only way to request wildcard certificates (works only with dns challenge).
  domains:
    enabled: false
    # List of sets of main and (optional) SANs to generate for
    # for wildcard certificates see https://docs.traefik.io/configuration/acme/#wildcard-domains
    domainsList:
    # - main: "*.example.com"
    # - sans:
    #   - "example.com"
    # - main: "*.example2.com"
    # - sans:
    #   - "test1.example2.com"
    #   - "test2.example2.com"
  ## ACME challenge type: "tls-sni-01", "tls-alpn-01", "http-01" or "dns-01"
  ## Note the chart's default of tls-sni-01 has been DEPRECATED and (except in
  ## certain circumstances) DISABLED by Let's Encrypt. It remains as a default
  ## value in this chart to preserve legacy behavior and avoid a breaking
  ## change. Users of this chart should strongly consider making the switch to
  ## the recommended "tls-alpn-01" (avaialbe since v1.7), dns-01 or http-01
  ## (available since v1.5) challenge.
  challengeType: tls-sni-01
  ## Configure dnsProvider to perform domain verification using dns challenge
  ## Applicable only if using the dns-01 challenge type
  delayBeforeCheck: 0
  resolvers: []
    # - 1.1.1.1:53
  # - 8.8.8.8:53
  dnsProvider:
    name: nil
    existingSecretName: ""
    auroradns:
      AURORA_USER_ID: ""
      AURORA_KEY: ""
      AURORA_ENDPOINT: ""
    azure:
      AZURE_CLIENT_ID: ""
      AZURE_CLIENT_SECRET: ""
      AZURE_SUBSCRIPTION_ID: ""
      AZURE_TENANT_ID: ""
      AZURE_RESOURCE_GROUP: ""
    cloudflare:
      CLOUDFLARE_EMAIL: ""
      CLOUDFLARE_API_KEY: ""
    digitalocean:
      DO_AUTH_TOKEN: ""
    dnsimple:
      DNSIMPLE_OAUTH_TOKEN: ""
      DNSIMPLE_BASE_URL: ""
    dnsmadeeasy:
      DNSMADEEASY_API_KEY: ""
      DNSMADEEASY_API_SECRET: ""
      DNSMADEEASY_SANDBOX: ""
    dnspod:
      DNSPOD_API_KEY: ""
    dreamhost:
      DREAMHOST_API_KEY: ""
    dyn:
      DYN_CUSTOMER_NAME: ""
      DYN_USER_NAME: ""
      DYN_PASSWORD: ""
    exoscale:
      EXOSCALE_API_KEY: ""
      EXOSCALE_API_SECRET: ""
      EXOSCALE_ENDPOINT: ""
    gandi:
      GANDI_API_KEY: ""
    godaddy:
      GODADDY_API_KEY: ""
      GODADDY_API_SECRET: ""
    gcloud:
      GCE_PROJECT: ""
      GCE_SERVICE_ACCOUNT_FILE: ""
    linode:
      LINODE_API_KEY: ""
    namecheap:
      NAMECHEAP_API_USER: ""
      NAMECHEAP_API_KEY: ""
    ns1:
      NS1_API_KEY: ""
    otc:
      OTC_DOMAIN_NAME: ""
      OTC_USER_NAME: ""
      OTC_PASSWORD: ""
      OTC_PROJECT_NAME: ""
      OTC_IDENTITY_ENDPOINT: ""
    ovh:
      OVH_ENDPOINT: ""
      OVH_APPLICATION_KEY: ""
      OVH_APPLICATION_SECRET: ""
      OVH_CONSUMER_KEY: ""
    pdns:
      PDNS_API_URL: ""
    rackspace:
      RACKSPACE_USER: ""
      RACKSPACE_API_KEY: ""
    rfc2136:
      RFC2136_NAMESERVER: ""
      RFC2136_TSIG_ALGORITHM: ""
      RFC2136_TSIG_KEY: ""
      RFC2136_TSIG_SECRET: ""
      RFC2136_TIMEOUT: ""
    route53:
      AWS_REGION: ""
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
    vultr:
      VULTR_API_KEY: ""
  ## Save ACME certs to a persistent volume.
  ## WARNING: If you do not do this and you did not have configured
  ## a kvprovider, you will re-request certs every time a pod (re-)starts
  ## and you WILL be rate limited!
  persistence:
    enabled: true
    annotations: {}
    ## acme data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 1Gi
    ## A manually managed Persistent Volume Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    ##
    # existingClaim:
dashboard:
  enabled: true
  domain: traefikt-dashboard.nifi.pns.svc.rickaastley.p.fti.net
  #serviceType: ClusterIP
  service: {}
    # annotations:
  #   key: value
  ingress:
    annotations:
      kubernetes.io/ingress.class: traefik
      external-dns.alpha.kubernetes.io/target: traefikt.nifi.pns.svc.rickaastley.p.fti.net
      # annotations:
      #   key: value
      # labels:
      #   key: value
      # tls:
      # - hosts:
      #   - traefik.example.com
      #   secretName: traefik-default-cert
  auth: {}
    # basic:
  #   username: DfyPower!
  statistics: {}
    ## Number of recent errors to show in the ‘Health’ tab
  # recentErrors:
service:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: traefikt.nifi.pns.svc.rickaastley.p.fti.net
  # labels:
  #   key: value
  ## Further config for service of type NodePort
  ## Default config with empty string "" will assign a dynamic
  ## nodePort to http and https ports
  nodePorts:
    http: ""
    https: ""

  ## If static nodePort configuration is required it can be enabled as below
  ## Configure ports in allowable range (eg. 30000 - 32767 on minikube)
  # nodePorts:
  #   http: 30080
  #   https: 30443
gzip:
  enabled: true
traefikLogFormat: json
accessLogs:
  enabled: false
  ## Path to the access logs file. If not provided, Traefik defaults it to stdout.
  # filePath: ""
  format: common  # choices are: common, json
  ## for JSON logging, finer-grained control over what is logged. Fields can be
  ## retained or dropped, and request headers can be retained, dropped or redacted
  fields:
    # choices are keep, drop
    defaultMode: keep
    names: {}
    # ClientUsername: drop
    headers:
      # choices are keep, drop, redact
      defaultMode: keep
      names: {}
      # Authorization: redact
rbac:
  enabled: true
## Enable the /metrics endpoint, for now only supports prometheus
## set to true to enable metric collection by prometheus
metrics:
  prometheus:
    enabled: true
    # buckets: [0.1,0.3,1.2,5]
    serviceMonitor:
      # When set true and if Prometheus Operator is installed then use a ServiceMonitor to configure scraping
      enabled: true
      # Set the namespace the ServiceMonitor should be deployed
      namespace: monitoring
      # Set how frequently Prometheus should scrape
      interval: 30s
    # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
    # labels:
  datadog:
    enabled: false
    # address: localhost:8125
    # pushinterval: 10s
  statsd:
    enabled: false
    # address: localhost:8125
    # pushinterval: 10s
deployment:
  # labels to add to the deployment
  # labels:
  #   key: value
  # annotations:
  #   key: value
  # labels to add to the pod container metadata
#  podLabels:
#    app: proxydata-ingress
  # podAnnotations:
  #   key: value
  hostPort:
    httpEnabled: false
    httpsEnabled: false
    dashboardEnabled: false
    # httpPort: 80
    # httpsPort: 443
    # dashboardPort: 8080
sendAnonymousUsage: false
tracing:
  enabled: false
  serviceName: traefik
  # backend: choices are jaeger, zipkin, datadog
  # jaeger:
  #   localAgentHostPort: "127.0.0.1:6831"
  #   samplingServerURL: http://localhost:5778/sampling
  #   samplingType: const
  #   samplingParam: 1.0
  # zipkin:
  #   httpEndpoint: http://localhost:9411/api/v1/spans
  #   debug: false
  #   sameSpan: false
  #   id128bit: true
  # datadog:
  #   localAgentHostPort: "127.0.0.1:8126"
  #   debug: false
  #   globalTag: ""

## Create HorizontalPodAutoscaler object.
##
# autoscaling:
#   minReplicas: 1
#   maxReplicas: 10
#   metrics:
#   - type: Resource
#     resource:
#       name: cpu
#       targetAverageUtilization: 60
#   - type: Resource
#     resource:
#       name: memory
#       targetAverageUtilization: 60

## Timeouts
##
# timeouts:
#   ## responding are timeouts for incoming requests to the Traefik instance
#   responding:
#     readTimeout: 0s
#     writeTimeout: 0s
#     idleTimeout: 180s
#   ## forwarding are timeouts for requests forwarded to the backend servers
#   forwarding:
#     dialTimeout: 30s
#     responseHeaderTimeout: 0s

# forwardAuth:
#   entryPoints: ["http", "https"]
#   address: https://authserver.com/auth
#   trustForwardHeader: true

# Any extra volumes to define for the pod
extraVolumes: []
  # - name: example-name
  #   hostPath:
  #     path: /path/on/host
#     type: DirectoryOrCreate

# Any extra volume mounts to define for the Traefik container
extraVolumeMounts: []
#   - name: example-name
#     mountPath: /path/in/container